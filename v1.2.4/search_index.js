var documenterSearchIndex = {"docs":
[{"location":"api/#Library-Reference","page":"Library Reference","title":"Library Reference","text":"","category":"section"},{"location":"api/","page":"Library Reference","title":"Library Reference","text":"Modules = [Petri]","category":"page"},{"location":"api/#Petri.Petri","page":"Library Reference","title":"Petri.Petri","text":"Petri\n\nProvides a modeling framework for representing and solving stochastic petri nets\n\n\n\n\n\n","category":"module"},{"location":"api/#Petri.NullPetri","page":"Library Reference","title":"Petri.NullPetri","text":"NullPetri\n\ncreate a Petri net of no states and no transitions\n\n\n\n\n\n","category":"constant"},{"location":"api/#Catlab.Graphics.Graphviz.Graph-Tuple{Model}","page":"Library Reference","title":"Catlab.Graphics.Graphviz.Graph","text":"Graph(model::Model)\n\nconvert a Model into a GraphViz Graph. Transition are green boxes and states are blue circles. Arrows go from the input states to the output states for each transition.\n\n\n\n\n\n","category":"method"},{"location":"api/#DiffEqBase.ODEProblem-Tuple{Model,Any,Any,Any}","page":"Library Reference","title":"DiffEqBase.ODEProblem","text":"ODEProblem(m::Model, u0, tspan, β)\n\nGenerate an OrdinaryDiffEq ODEProblem\n\n\n\n\n\n","category":"method"},{"location":"api/#DiffEqBase.SDEProblem-Tuple{Model,Any,Any,Any}","page":"Library Reference","title":"DiffEqBase.SDEProblem","text":"SDEProblem(m::Model, u0, tspan, β)\n\nGenerate an StochasticDiffEq SDEProblem and an appropriate CallbackSet\n\n\n\n\n\n","category":"method"},{"location":"api/#DiffEqBase.SteadyStateProblem-Tuple{Model,Any,Any,Any}","page":"Library Reference","title":"DiffEqBase.SteadyStateProblem","text":"SteadyStateProblem(m::Model, u0, tspan, β)\n\nGenerate an SteadyStateDiffEq SteadyStateProblem\n\n\n\n\n\n","category":"method"},{"location":"api/#DiffEqJump.JumpProblem-Tuple{Model,Any,Any,Any}","page":"Library Reference","title":"DiffEqJump.JumpProblem","text":"JumpProblem(m::Model, u0, tspan, β)\n\nGenerate an DiffEqJump JumpProblem\n\n\n\n\n\n","category":"method"},{"location":"api/#Petri.Model","page":"Library Reference","title":"Petri.Model","text":"Model{S,D}\n\nStructure for representing the petri net model\n\nrepresented by states and transition functions\n\n\n\n\n\n","category":"type"},{"location":"api/#Petri.EmptyPetri-Tuple{Int64}","page":"Library Reference","title":"Petri.EmptyPetri","text":"EmptyPetri(n::Int)\n\ncreate a Petri net of n states with no transitions\n\n\n\n\n\n","category":"method"},{"location":"api/#Petri.EmptyPetri-Union{Tuple{Array{T,1}}, Tuple{T}} where T","page":"Library Reference","title":"Petri.EmptyPetri","text":"EmptyPetri(s::Vector{T})\n\ncreate a Petri net with states s with no transitions\n\n\n\n\n\n","category":"method"},{"location":"api/#Petri.vectorfield-Tuple{Model}","page":"Library Reference","title":"Petri.vectorfield","text":"vectorfield(m::Model)\n\nConvert a petri model into a differential equation function that can be passed into DifferentialEquation.jl or OrdinaryDiffEq.jl solvers\n\n\n\n\n\n","category":"method"},{"location":"examples/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"EditURL = \"https://github.com/mehalter/Petri.jl/blob/master/examples/lotka-volterra.jl\"","category":"page"},{"location":"examples/lotka-volterra/#lotka_volterra_example","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"","category":"section"},{"location":"examples/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"(Image: )","category":"page"},{"location":"examples/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"using Petri\nusing LabelledArrays\nusing Plots\nusing OrdinaryDiffEq","category":"page"},{"location":"examples/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"Step 1: Define the states and transitions of the Petri Net","category":"page"},{"location":"examples/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"Here we have 2 states, wolves and rabbits, and transitions to model predation between the two species in the system","category":"page"},{"location":"examples/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"S  = [:rabbits, :wolves]\nΔ  = LVector(\n       birth=(LVector(rabbits=1), LVector(rabbits=2)),\n       predation=(LVector(wolves=1, rabbits=1), LVector(wolves=2)),\n       death=(LVector(wolves=1), LVector()),\n     )\nlotka = Petri.Model(S, Δ)\n\nGraph(lotka)","category":"page"},{"location":"examples/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"Step 2: Define the parameters and transition rates","category":"page"},{"location":"examples/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"Once a model is defined, we can define out initial parameters u0, a time span tspan, and the transition rates of the interactions β","category":"page"},{"location":"examples/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"u0 = LVector(wolves=10.0, rabbits=100.0)\ntspan = (0.0,100.0)\nβ = LVector(birth=.3, predation=.015, death=.7);\nnothing #hide","category":"page"},{"location":"examples/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"Step 3: Generate a solver and solve","category":"page"},{"location":"examples/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"Finally we can generate a solver and solve the simulation","category":"page"},{"location":"examples/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"prob = ODEProblem(lotka, u0, tspan, β)\nsol = OrdinaryDiffEq.solve(prob,Tsit5(),reltol=1e-8,abstol=1e-8)\n\nplot(sol)","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"EditURL = \"https://github.com/mehalter/Petri.jl/blob/master/examples/epidemiology.jl\"","category":"page"},{"location":"examples/epidemiology/#epidemiology_example","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"","category":"section"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"(Image: )","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"using Petri\nusing LabelledArrays\nusing Plots\nusing DiffEqJump\nusing StochasticDiffEq\nusing OrdinaryDiffEq","category":"page"},{"location":"examples/epidemiology/#SIR-Model","page":"Basic Epidemiology Models","title":"SIR Model","text":"","category":"section"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"The SIR model represents the epidemiological dynamics of an infectious disease that causes immunity in its victims. There are three states: Suceptible ,Infected, Recovered. These states interact through two transitions. Infection has the form S+I -> 2I where a susceptible person meets an infected person and results in two infected people. The second transition is recovery I -> R where an infected person recovers spontaneously.","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"S  = [:S,:I,:R]\nΔ  = LVector(\n       inf=(LVector(S=1, I=1), LVector(I=2)),\n       rec=(LVector(I=1),      LVector(R=1)),\n     )\nsir = Petri.Model(S, Δ)\n\nGraph(sir)","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"Once a model is defined, we can define out initial parameters u0, a time span tspan, and the transition rates of the interactions β","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"u0 = LVector(S=990.0, I=10.0, R=0.0)\ntspan = (0.0,40.0)","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"add a dynamic transition rate for infection where the rate of infection decreases over time as is dependent on the current state of the system","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"β = LVector(inf=((u,t)->((3/sum(u))/(t+1))), rec=0.25);\nnothing #hide","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"each transition rates can one of three options:","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"constant: β = [.25]\nwhere the rate is specified by a value of type Number\ntime dependent: β = [t->((3/1000)/(t+1))]\nwhere t is the current time step\nstate and time dependent: β = [(u,t)->((3/sum(u))/(t+1))]\nwhere u is the current state of u0 and t is the current time step","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"Petri.jl provides interfaces to StochasticDiffEq.jl, DiffEqJump.jl, and OrdinaryDiffEq.jl Here, we call the JumpProblem function that returns an DiffEqJump problem object that can be passed to the DiffEqJump solver which can then be plotted and visualized","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"prob = JumpProblem(sir, u0, tspan, β)\nsol = DiffEqJump.solve(prob,SSAStepper())\n\nplot(sol)","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"Similarly, we can generated SDEProblem statements that can be used with StochasticDiffEq solvers","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"prob, cb = SDEProblem(sir, u0, tspan, β)\nsol = StochasticDiffEq.solve(prob,LambaEM(),callback=cb)\n\nplot(sol)","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"Lastly, we can generated ODEProblem statements that can be used with OrdinOrdinaryDiffEq solvers","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"prob = ODEProblem(sir, u0, tspan, β)\nsol = OrdinaryDiffEq.solve(prob,Tsit5(),reltol=1e-8,abstol=1e-8)\n\nplot(sol)","category":"page"},{"location":"examples/epidemiology/#SEIR-Model","page":"Basic Epidemiology Models","title":"SEIR Model","text":"","category":"section"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"S = [:S,:E,:I,:R]\nΔ = LVector(\n      exp=(LVector(S=1, I=1), LVector(I=1, E=1)),\n      inf=(LVector(E=1),      LVector(I=1)),\n      rec=(LVector(I=1),      LVector(R=1)),\n    )\nseir = Petri.Model(S, Δ)\n\nGraph(seir)","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"u0 = LVector(S=990.0, E=10.0, I=0.0, R=0.0)\ntspan = (0.0,40.0)\nβ = LVector(exp=0.7/sum(u0), inf=0.5, rec=0.25)\n\nprob, cb = SDEProblem(seir, u0, tspan, β)\nsol = StochasticDiffEq.solve(prob,LambaEM(),callback=cb)\n\nplot(sol)","category":"page"},{"location":"examples/epidemiology/#SEIRD-Model","page":"Basic Epidemiology Models","title":"SEIRD Model","text":"","category":"section"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"S = [:S,:E,:I,:R, :D]\nΔ = LVector(\n      exp=(LVector(S=1, I=1), LVector(I=1, E=1)),\n      inf=(LVector(E=1),      LVector(I=1)),\n      rec=(LVector(I=1),      LVector(R=1)),\n      die=(LVector(I=1),      LVector(D=1)),\n    )\nseird = Petri.Model(S, Δ)\n\nGraph(seird)","category":"page"},{"location":"examples/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"u0 = LVector(S=990.0, E=10.0, I=0.0, R=0.0, D=0.0)\ntspan = (0.0,40.0)\nβ = LVector(exp=0.9/sum(u0), inf=0.9, rec=0.25, die=0.03)\n\nprob, cb = SDEProblem(seird, u0, tspan, β)\nsol = StochasticDiffEq.solve(prob,LambaEM(),callback=cb)\n\nplot(sol)","category":"page"},{"location":"","page":"Petri.jl","title":"Petri.jl","text":"(Image: Petri.jl)","category":"page"},{"location":"","page":"Petri.jl","title":"Petri.jl","text":"CurrentModule = Petri","category":"page"},{"location":"","page":"Petri.jl","title":"Petri.jl","text":"Petri.jl is a Petri net modeling framework for the Julia programming language. Petri makes it easy to build complex reaction networks using a simple DSL. Once a model is defined, Petri.jl has support to generate ODE solutions and stochastic simulations using DifferentialEquations.jl.","category":"page"},{"location":"#Goals","page":"Petri.jl","title":"Goals","text":"","category":"section"},{"location":"","page":"Petri.jl","title":"Petri.jl","text":"This is related to the  DiffeqBiological Reaction  DSL, but takes a different implementation approach. Instead of building our  framework around symbolic algebra and standard chemical notion, we are working  off the Applied Category Theory approach to reaction networks [Baez Pollard, 2017].","category":"page"},{"location":"","page":"Petri.jl","title":"Petri.jl","text":"There are operations that are easy to do on the Petri.Model like \"add a transition from R to S\" that require simultaneously changing multiple parts of the algebraic formulation. Applied Category Theory gives a sound theoretical framework for manipulating Petri Nets as a model in terms of the given domain. Petri is a Julia package primarily intended to investigate how we can operationalize this theory into practical scientific software.","category":"page"},{"location":"","page":"Petri.jl","title":"Petri.jl","text":"See AlgebraicPetri for tools that work with Petri net models and manipulating them with higher level APIs based on Applied Category Theory.","category":"page"}]
}
